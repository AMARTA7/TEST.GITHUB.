## Object − Objects have states and behaviors. 
    Example-1: A dog has states - color, name, breed as well as behavior such as wagging their tail, 
    barking, eating. An object is an instance of a class.
    
    Example-2: A car is an object whose states are: brand, colour, number-plate.
    Behavior: Running on the road.

## Class − A class can be defined as a template/blueprint that describes the behavior/state that the object 
of its type supports.
    Example: Blueprint of the house is class.

## Methods − A method is basically a behavior. A class can contain many methods. It is in methods where the 
logics are written, data is manipulated and all the actions are executed.
    Example: The fuel indicator indicates the amount of fuel left in the car.

## Instance Variables − Each object has its unique set of instance variables. An object's state is created 
by the values assigned to these instance variables.

Note: i. When the class is public, the name of the file should be the class name.

      ii. Java is a case-sensitive language, which means that the identifiers AB, Ab, aB, and ab are different in Java.

      iii. The first letter of the class should be in Uppercase

      iv. If several words are used to form a name of the class, each inner word’s first letter should be 
      in Upper Case, Underscore are allowed.
            Example: class MyJavaProgram    // valid syntax
                     class myJavaProgram    // invalid syntax

      v. All the method names should start with a Lower Case letter.

      vi. If several words are used to form the name of the method, then each first letter of the inner word 
      should be in Upper Case, Underscore are allowed. (This is allowed in java and please correct the below 
      example as well both are correct syntax as per Java but as standard people follow lowercase first char 
      in function name)
            Example: public void employeeRecords() // valid syntax
                     public void EmployeeRecords() // valid syntax

      vii. Access Modifiers: These modifiers control the scope of class and methods.
            Access Modifiers: default, public, protected, private
            Non-access Modifiers: final, abstract, strictfp

------------------------------------------------------------------------------------------------------------------------

# main method: main() in Java is the entry point for any Java program. It is always written 
as public static void main(String[] args).

    -> public: Public is an access modifier, which is used to specify who can access this method. Public means 
    that this Method will be accessible by any Class.

    -> static: It is a keyword in java which identifies it is class-based. main() is made static in Java so that 
    it can be accessed without creating the instance of a Class. In case, main is not made static then the 
    compiler will throw an error as main() is called by the JVM before any objects are made and only static 
    methods can be directly invoked via the class. 

    -> void: It is the return type of the method. Void defines the method which will not return any value.

    -> main: It is the name of the method which is searched by JVM as a starting point for an application with 
    a particular signature only. It is the method where the main execution occurs.

    -> String args[]: It is the parameter passed to the main method.

--------------------------------------------------------------------------------------------------------------------------

### Java Command Line Arguments: The java command-line argument is an argument i.e. passed at the time of running 
the java program. The arguments passed from the console can be received in the java program and it can be 
used as an input.

    Example-01: Program to check for command line arguments.

    class Hello{
        public static void main(String[] args){

        // check if length of args array is
        // greater than 0
        if (args.length > 0){
            System.out.println("The command line"+" arguments are:");
  
            // iterating the args array and printing
            // the command line arguments
            for (String val:args)
                System.out.println(val);
        }
        else
            System.out.println("No command line "+"arguments found.");
        }
    }
    -------------------------------------------------------------------------------------------------------

    Example-02: Java Command Line Arguments.

    class A{  
        public static void main(String args[]){  
            for(int i=0;i<args.length;i++)  
            System.out.println(args[i]);  
        }  
    }  
-----------------
compile by > javac A.java  
run by > java A sonoo jaiswal 1 3 abc 
-------------
Output: sonoo
       jaiswal
       1
       3
       abc  
-------------------------------------------------------------------------------------------------------------

## How JVM Works: 
JVM(Java Virtual Machine) acts as a run-time engine to run Java applications. JVM is the one that actually 
calls the main method present in a java code. JVM is a part of JRE(Java Runtime Environment).

Java applications are called WORA (Write Once Run Anywhere). This means a programmer can develop Java code 
on one system and can expect it to run on any other Java-enabled system without any adjustment. This is all 
possible because of JVM.

When we compile a .java file, .class files(contains byte-code) with the same class names present in .java 
file are generated by the Java compiler. This .class file goes into various steps when we run it. These 
steps together describe the whole JVM. 
-------------------------------------------------------------------------------------------------------------

## Java Identifiers:
In programming languages, identifiers are used for identification purposes. In Java, an identifier can be 
a class name, method name, variable name, or label. For example :
    public class Test{
        public static void main(String[] args){
            int a = 20;
        }
    }
-------------------
            In the above java code, we have 5 identifiers namely :
                Test : class name.
                main : method name.
                String : predefined class name.
                args : variable name.
                a : variable name.
-----------------------------------------------------------------------------------------------------------------               

## Data types in Java:
    -> Primitive Data Type: such as boolean, char, int, short, byte, long, float, and double (8 types)

Example:
// Java program to demonstrate
// primitive data types in Java
  
class GeeksforGeeks {
    public static void main(String args[]){

        // declaring character
        char a = 'G';
  
        // Integer data type is generally
        // used for numeric values
        int i = 89;
  
        // use byte and short
        // if memory is a constraint
        byte b = 4;
  
        // this will give error as number is
        // larger than byte range
        // byte b1 = 7888888955;
  
        short s = 56;
  
        // this will give error as number is
        // larger than short range
        // short s1 = 87878787878;
  
        // by default fraction value
        // is double in java
        double d = 4.355453532;
  
        // for float use 'f' as suffix
        float f = 4.7333434f;
  
        System.out.println("char: " + a);
        System.out.println("integer: " + i);
        System.out.println("byte: " + b);
        System.out.println("short: " + s);
        System.out.println("float: " + f);
        System.out.println("double: " + d);
    }
}
-------------------------------

    -> Non-Primitive Data Type or Object Data type: such as String, Array, etc.
        
        ## Class: A class is a user-defined blueprint or prototype from which objects are created. 
        It represents the set of properties or methods that are common to all objects of one type. 
        In general, class declarations can include these components, in order:

            * Modifiers: A class can be public or has default access.

            * Class name: The name should begin with a initial letter (capitalized by convention).

            * Superclass(if any): The name of the class’s parent (superclass), if any, preceded by the 
            keyword extends. A class can only extend (subclass) one parent.

            * Interfaces(if any): A comma-separated list of interfaces implemented by the class, if any, 
            preceded by the keyword implements. A class can implement more than one interface.

            * Body: The class body surrounded by braces, { }.


        ## Object: It is a basic unit of Object-Oriented Programming and represents the real-life entities.  
        A typical Java program creates many objects, which as you know, interact by invoking methods. 
        An object consists of : 

            * State: It is represented by attributes of an object. It also reflects the properties of an object.

            * Behavior: It is represented by methods of an object. It also reflects the response of an object with other objects.

            * Identity: It gives a unique name to an object and enables one object to interact with other objects.


        ## Interface: Like a class, an interface can have methods and variables, but the methods declared 
        in an interface are by default abstract (only method signature, nobody). 

            * Interfaces specify what a class must do and not how. It is the blueprint of the class.

            * An Interface is about capabilities like a Player may be an interface and any class implementing 
            Player must be able to (or must implement) move(). So it specifies a set of methods that the 
            class has to implement.

            * If a class implements an interface and does not provide method bodies for all functions 
            specified in the interface, then the class must be declared abstract.

            * A Java library example is, Comparator Interface. If a class implements this interface, then it 
            can be used to sort a collection.


        ## Array: An array is a group of like-typed variables that are referred to by a common name. Arrays 
        in Java work differently than they do in C/C++. The following are some important points about Java arrays. 

            * In Java, all arrays are dynamically allocated. (discussed below) 
 
            * Since arrays are objects in Java, we can find their length using member length. This is different 
            from C/C++ where we find length using size.

            * A Java array variable can also be declared like other variables with [] after the data type.

            * The variables in the array are ordered and each has an index beginning from 0.

            * Java array can be also be used as a static field, a local variable or a method parameter.

            * The size of an array must be specified by an int value and not long or short.

            * The direct superclass of an array type is Object. 
 
            * Every array type implements the interfaces Cloneable and java.io.Serializable.
---------------------------------------------------------------------------------------------------------------------












