## Object − Objects have states and behaviors. 
    Example-1: A dog has states - color, name, breed as well as behavior such as wagging their tail, 
    barking, eating. An object is an instance of a class.
    
    Example-2: A car is an object whose states are: brand, colour, number-plate.
    Behavior: Running on the road.

## Class − A class can be defined as a template/blueprint that describes the behavior/state that the object 
of its type supports.
    Example: Blueprint of the house is class.

## Methods − A method is basically a behavior. A class can contain many methods. It is in methods where the 
logics are written, data is manipulated and all the actions are executed.
    Example: The fuel indicator indicates the amount of fuel left in the car.

## Instance Variables − Each object has its unique set of instance variables. An object's state is created 
by the values assigned to these instance variables.

Note: i. When the class is public, the name of the file should be the class name.

      ii. Java is a case-sensitive language, which means that the identifiers AB, Ab, aB, and ab are different in Java.

      iii. The first letter of the class should be in Uppercase

      iv. If several words are used to form a name of the class, each inner word’s first letter should be 
      in Upper Case, Underscore are allowed.
            Example: class MyJavaProgram    // valid syntax
                     class myJavaProgram    // invalid syntax

      v. All the method names should start with a Lower Case letter.

      vi. If several words are used to form the name of the method, then each first letter of the inner word 
      should be in Upper Case, Underscore are allowed. (This is allowed in java and please correct the below 
      example as well both are correct syntax as per Java but as standard people follow lowercase first char 
      in function name)
            Example: public void employeeRecords() // valid syntax
                     public void EmployeeRecords() // valid syntax

      vii. Access Modifiers: These modifiers control the scope of class and methods.
            Access Modifiers: default, public, protected, private
            Non-access Modifiers: final, abstract, strictfp

------------------------------------------------------------------------------------------------------------------------

# main method: main() in Java is the entry point for any Java program. It is always written 
as public static void main(String[] args).

    -> public: Public is an access modifier, which is used to specify who can access this method. Public means 
    that this Method will be accessible by any Class.

    -> static: It is a keyword in java which identifies it is class-based. main() is made static in Java so that 
    it can be accessed without creating the instance of a Class. In case, main is not made static then the 
    compiler will throw an error as main() is called by the JVM before any objects are made and only static 
    methods can be directly invoked via the class. 

    -> void: It is the return type of the method. Void defines the method which will not return any value.

    -> main: It is the name of the method which is searched by JVM as a starting point for an application with 
    a particular signature only. It is the method where the main execution occurs.

    -> String args[]: It is the parameter passed to the main method.

--------------------------------------------------------------------------------------------------------------------------

### Java Command Line Arguments: The java command-line argument is an argument i.e. passed at the time of running 
the java program. The arguments passed from the console can be received in the java program and it can be 
used as an input.

    Example-01: Program to check for command line arguments.

    class Hello{
        public static void main(String[] args){

        // check if length of args array is
        // greater than 0
        if (args.length > 0){
            System.out.println("The command line"+" arguments are:");
  
            // iterating the args array and printing
            // the command line arguments
            for (String val:args)
                System.out.println(val);
        }
        else
            System.out.println("No command line "+"arguments found.");
        }
    }
    -------------------------------------------------------------------------------------------------------

    Example-02: Java Command Line Arguments.

    class A{  
        public static void main(String args[]){  
            for(int i=0;i<args.length;i++)  
            System.out.println(args[i]);  
        }  
    }  
-----------------
compile by > javac A.java  
run by > java A sonoo jaiswal 1 3 abc 
-------------
Output: sonoo
       jaiswal
       1
       3
       abc  
-------------------------------------------------------------------------------------------------------------

## How JVM Works: 
JVM(Java Virtual Machine) acts as a run-time engine to run Java applications. JVM is the one that actually 
calls the main method present in a java code. JVM is a part of JRE(Java Runtime Environment).

Java applications are called WORA (Write Once Run Anywhere). This means a programmer can develop Java code 
on one system and can expect it to run on any other Java-enabled system without any adjustment. This is all 
possible because of JVM.

When we compile a .java file, .class files(contains byte-code) with the same class names present in .java 
file are generated by the Java compiler. This .class file goes into various steps when we run it. These 
steps together describe the whole JVM. 
-------------------------------------------------------------------------------------------------------------

## Java Identifiers:
In programming languages, identifiers are used for identification purposes. In Java, an identifier can be 
a class name, method name, variable name, or label. For example :
    public class Test{
        public static void main(String[] args){
            int a = 20;
        }
    }
-------------------
            In the above java code, we have 5 identifiers namely :
                Test : class name.
                main : method name.
                String : predefined class name.
                args : variable name.
                a : variable name.
-----------------------------------------------------------------------------------------------------------------               

## Data types in Java:
    -> Primitive Data Type: such as boolean, char, int, short, byte, long, float, and double (8 types)

Example:
// Java program to demonstrate
// primitive data types in Java
  
class GeeksforGeeks {
    public static void main(String args[]){

        // declaring character
        char a = 'G';
  
        // Integer data type is generally
        // used for numeric values
        int i = 89;
  
        // use byte and short
        // if memory is a constraint
        byte b = 4;
  
        // this will give error as number is
        // larger than byte range
        // byte b1 = 7888888955;
  
        short s = 56;
  
        // this will give error as number is
        // larger than short range
        // short s1 = 87878787878;
  
        // by default fraction value
        // is double in java
        double d = 4.355453532;
  
        // for float use 'f' as suffix
        float f = 4.7333434f;
  
        System.out.println("char: " + a);
        System.out.println("integer: " + i);
        System.out.println("byte: " + b);
        System.out.println("short: " + s);
        System.out.println("float: " + f);
        System.out.println("double: " + d);
    }
}
-------------------------------

    -> Non-Primitive Data Type or Object Data type: such as String, Array, etc.
        
        ## Class: A class is a user-defined blueprint or prototype from which objects are created. 
        It represents the set of properties or methods that are common to all objects of one type. 
        In general, class declarations can include these components, in order:

            * Modifiers: A class can be public or has default access.

            * Class name: The name should begin with a initial letter (capitalized by convention).

            * Superclass(if any): The name of the class’s parent (superclass), if any, preceded by the 
            keyword extends. A class can only extend (subclass) one parent.

            * Interfaces(if any): A comma-separated list of interfaces implemented by the class, if any, 
            preceded by the keyword implements. A class can implement more than one interface.

            * Body: The class body surrounded by braces, { }.


        ## Object: It is a basic unit of Object-Oriented Programming and represents the real-life entities.  
        A typical Java program creates many objects, which as you know, interact by invoking methods. 
        An object consists of : 

            * State: It is represented by attributes of an object. It also reflects the properties of an object.

            * Behavior: It is represented by methods of an object. It also reflects the response of an object with other objects.

            * Identity: It gives a unique name to an object and enables one object to interact with other objects.


        ## Interface: Like a class, an interface can have methods and variables, but the methods declared 
        in an interface are by default abstract (only method signature, nobody). 

            * Interfaces specify what a class must do and not how. It is the blueprint of the class.

            * An Interface is about capabilities like a Player may be an interface and any class implementing 
            Player must be able to (or must implement) move(). So it specifies a set of methods that the 
            class has to implement.

            * If a class implements an interface and does not provide method bodies for all functions 
            specified in the interface, then the class must be declared abstract.

            * A Java library example is, Comparator Interface. If a class implements this interface, then it 
            can be used to sort a collection.


        ## Array: An array is a group of like-typed variables that are referred to by a common name. Arrays 
        in Java work differently than they do in C/C++. The following are some important points about Java arrays. 

            * In Java, all arrays are dynamically allocated. (discussed below) 
 
            * Since arrays are objects in Java, we can find their length using member length. This is different 
            from C/C++ where we find length using size.

            * A Java array variable can also be declared like other variables with [] after the data type.

            * The variables in the array are ordered and each has an index beginning from 0.

            * Java array can be also be used as a static field, a local variable or a method parameter.

            * The size of an array must be specified by an int value and not long or short.

            * The direct superclass of an array type is Object. 
 
            * Every array type implements the interfaces Cloneable and java.io.Serializable.
---------------------------------------------------------------------------------------------------------------------

## Decision Making in Java (if, if-else, switch, break, continue, jump):

    -> if: if statement is the most simple decision making statement. It is used to decide whether a certain 
    statement or block of statements will be executed or not i.e if a certain condition is true then a block
    of statement is executed otherwise not.

    Example: 
    
        // Java program to illustrate If statement
        class IfDemo{
            public static void main(String args[]){
                int i = 10;
                if (i > 15)
                    System.out.println("10 is less than 15");
  
            // This statement will be executed
            // as if considers one statement by default
            System.out.println("I am Not in if");
            }
        }

        Output: I am Not in if


     -> if-else: The if statement alone tells us that if a condition is true it will execute a block of 
     statements and if the condition is false it won’t. But what if we want to do something else if the 
     condition is false. Here comes the else statement. We can use the else statement with if statement to 
     execute a block of code when the condition is false. 

     Example:

        // Java program to illustrate if-else statement
        class IfElseDemo{
	        public static void main(String args[]){
		        int i = 10;
                if (i < 15)
			        System.out.println("i is smaller than 15");
		        else
			        System.out.println("i is greater than 15");
	        }
        }

        Output: i is smaller than 15

    -> nested-if: A nested if is an if statement that is the target of another if or else. Nested if statements 
    means an if statement inside an if statement. Yes, java allows us to nest if statements within if statements. 
    i.e, we can place an if statement inside another if statement.   

    Example:

        // Java program to illustrate nested-if statement
        class NestedIfDemo{
	        public static void main(String args[]){
		        int i = 10;
                if (i == 10){
			    // First if statement
			    if (i < 15)
				    System.out.println("i is smaller than 15");

			    // Nested - if statement
			    // Will only be executed if statement above
			    // it is true
			    if (i < 12)
				    System.out.println("i is smaller than 12 too");
			    else
				    System.out.println("i is greater than 15");
		        }
	        }
        }

        Output: i is smaller than 15
                i is smaller than 12 too


    -> if-else-if ladder: Here, a user can decide among multiple options.The if statements are executed from 
    the top down. As soon as one of the conditions controlling the if is true, the statement associated with 
    that if is executed, and the rest of the ladder is bypassed. If none of the conditions is true, then the 
    final else statement will be executed.

    Example:

        // Java program to illustrate if-else-if ladder
        class ifelseifDemo{
	        public static void main(String args[]){
                    int i = 20;
                    if (i == 10)
			            System.out.println("i is 10");
		            else if (i == 15)
			            System.out.println("i is 15");
		            else if (i == 20)
			            System.out.println("i is 20");
		            else
			            System.out.println("i is not present");
	        }
        }

        Output: i is 20


    -> switch-case: The switch statement is a multiway branch statement. It provides an easy way to dispatch 
    execution to different parts of code based on the value of the expression.

    Example:

    // Java program to illustrate switch-case
    class SwitchCaseDemo{
	    public static void main(String args[]){
		    int i = 9;
		    switch (i)
		    {
		    case 0:
			    System.out.println("i is zero.");
			    break;
		    case 1:
			    System.out.println("i is one.");
			    break;
		    case 2:
			    System.out.println("i is two.");
			    break;
		    default:
			    System.out.println("i is greater than 2.");
		    }
	    }
    }

    Output: i is greater than 2.

        *** jump: Java supports three jump statement: break, continue and return. These three statements 
        transfer control to other part of the program.

            i. Break: Using break, we can force immediate termination of a loop, bypassing the conditional 
            expression and any remaining code in the body of the loop.

                Note: Break, when used inside a set of nested loops, will only break out of the innermost loop.

                    In Java, break is majorly used for:
                        * Terminate a sequence in a switch statement (discussed above).
                        * To exit a loop.
                        * Used as a “civilized” form of goto.

            Example 01: 

            // Java program to illustrate using
            // break to exit a loop
            class BreakLoopDemo{
	            public static void main(String args[]){
		            // Initially loop is set to run from 0-9
		            for (int i = 0; i < 10; i++){
			        // terminate loop when i is 5.
			            if (i == 5)
				        break;
			        System.out.println("i: " + i);
		            }
		            System.out.println("Loop complete.");
	            }
            }

            Output: i: 0
                    i: 1
                    i: 2
                    i: 3
                    i: 4
                    Loop complete.
 ---------------------------------     

            Example 02: Now, break statement can be use to jump out of target block.
                        Note: You cannot break to any label which is not defined for an enclosing block.

                // Java program to illustrate using break with goto
                class BreakLabelDemo{
	                public static void main(String args[]){
		                boolean t = true;

		                // label first
		                first:
		                {
			                // Illegal statement here as label second is not
			                // introduced yet break second;
			                second:
			                {
				                third:
				                {
					                // Before break
					                System.out.println("Before the break statement");

					                // break will take the control out of
					                // second label
					                if (t)
						                break second;
					                System.out.println("This won't execute.");
				                }
				                System.out.println("This won't execute.");
			                }

			                // First block
			                System.out.println("This is after second block.");
		                }
	                }
                }

                Output: Before the break.
                        This is after second block.


            ii. Continue: Sometimes it is useful to force an early iteration of a loop. That is, you might want 
            to continue running the loop but stop processing the remainder of the code in its body for this particular 
            iteration. This is, in effect, a goto just past the body of the loop, to the loop’s end. 
            The continue statement performs such an action.

            Example: 

            // Java program to illustrate using
            // continue in an if statement
            class ContinueDemo{
	            public static void main(String args[]){
		            for (int i = 0; i < 10; i++){
			            // If the number is even
			            // skip and continue
			            if (i%2 == 0)
				            continue;

			            // If number is odd, print it
			            System.out.print(i + " ");
		            }
	            }
            }

            Output: 1 3 5 7 9 


            iii. Return:The return statement is used to explicitly return from a method. That is, it causes 
            a program control to transfer back to the caller of the method.

            Example: 

            // Java program to illustrate using return
            class Return{
	            public static void main(String args[]){
		            boolean t = true;
		            System.out.println("Before the return.");
	
		            if (t)
			            return;

		            // Compiler will bypass every statement
		            // after return
		            System.out.println("This won't execute.");
	            }
            }

            Output: Before the return.
--------------------------------------------------------------------------------------------------------------------

### Loops in Java: Looping in programming languages is a feature which facilitates the execution of a set of 
instructions/functions repeatedly while some condition evaluates to true.

Java provides three ways for executing the loops. While all the ways provide similar basic functionality, 
they differ in their syntax and condition checking time.

    i. while loop: A while loop is a control flow statement that allows code to be executed repeatedly based 
    on a given Boolean condition. The while loop can be thought of as a repeating if statement.

        -> While loop starts with the checking of condition. If it evaluated to true, then the loop body 
        statements are executed otherwise first statement following the loop is executed. For this reason 
        it is also called Entry control loop

        -> Once the condition is evaluated to true, the statements in the loop body are executed. Normally 
        the statements contain an update value for the variable being processed for the next iteration.

        -> When the condition becomes false, the loop terminates which marks the end of its life cycle.

        Example:

        // Java program to illustrate while loop
        class whileLoopDemo{
	        public static void main(String args[]){
		        int x = 1;

		        // Exit when x becomes greater than 4
		        while (x <= 4){
			        System.out.println("Value of x:" + x);

			        // Increment the value of x for
			        // next iteration
			        x++;
		        }
	        }
        }

        Output: Value of x:1
                Value of x:2
                Value of x:3
                Value of x:4


    ii. for loop: for loop provides a concise way of writing the loop structure. Unlike a while loop, a for 
    statement consumes the initialization, condition and increment/decrement in one line thereby providing a 
    shorter, easy to debug structure of looping.

        -> Initialization condition: Here, we initialize the variable in use. It marks the start of a for loop. 
        An already declared variable can be used or a variable can be declared, local to loop only.

        -> Testing Condition: It is used for testing the exit condition for a loop. It must return a boolean value. 
        It is also an Entry Control Loop as the condition is checked prior to the execution of the loop statements.

        -> Statement execution: Once the condition is evaluated to true, the statements in the loop body are executed.

        -> Increment/ Decrement: It is used for updating the variable for next iteration.

        -> Loop termination:When the condition becomes false, the loop terminates marking the end of its life cycle.

            Example: 

            // Java program to illustrate for loop.
            class forLoopDemo{
	            public static void main(String args[]){
		            // for loop begins when x=2
		            // and runs till x <=4
		            for (int x = 2; x <= 4; x++)
			            System.out.println("Value of x:" + x);
	            }
            }

            Output: Value of x:2
                    Value of x:3
                    Value of x:4

  
    iii. Enhanced For loop

        -> Java also includes another version of for loop introduced in Java 5. Enhanced for loop provides a 
        simpler way to iterate through the elements of a collection or array. It is inflexible and should be 
        used only when there is a need to iterate through the elements in sequential manner without knowing 
        the index of currently processed element.

        ->Also note that the object/variable is immutable when enhanced for loop is used i.e it ensures that 
        the values in the array can not be modified, so it can be said as read only loop where you can’t update 
        the values as opposite to other loops where values can be modified.

        Example: 

        // Java program to illustrate enhanced for loop
        public class enhancedforloop{
	        public static void main(String args[]){
		        String array[] = {"Ron", "Harry", "Hermoine"};

		        //enhanced for loop
		        for (String x:array){
			        System.out.println(x);
		        }

		        /* for loop for same function
		        for (int i = 0; i < array.length; i++){
			        System.out.println(array[i]);
		        }
		        */
	        }
        }

        Output: Ron
                Harry
                Hermoine


    iv. do while: do while loop is similar to while loop with only difference that it checks for condition 
    after executing the statements, and therefore is an example of Exit Control Loop.

        -> do while loop starts with the execution of the statement(s). There is no checking of any condition 
        for the first time.

        -> After the execution of the statements, and update of the variable value, the condition is checked for 
        true or false value. If it is evaluated to true, next iteration of loop starts.

        -> When the condition becomes false, the loop terminates which marks the end of its life cycle.

        -> It is important to note that the do-while loop will execute its statements atleast once before any 
        condition is checked, and therefore is an example of exit control loop.

        Example: 

        // Java program to illustrate do-while loop
        class dowhileloopDemo{
	        public static void main(String args[]){
		        int x = 21;
		        do{
			        // The line will be printed even
			        // if the condition is false
			        System.out.println("Value of x:" + x);
			        x++;
		        }
		        while (x < 20);
	        }
        }

        Output: Value of x: 21


    v. Infinite loop: One of the most common mistakes while implementing any sort of looping is that that it 
    may not ever exit, that is the loop runs for infinite time. This happens when the condition fails for some reason.












